var _user$project$StopsList$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$StopsList$initialModel = {
	stops: _elm_lang$core$Native_List.fromArray(
		[]),
	uid: 0
};
var _user$project$StopsList$init = {ctor: '_Tuple2', _0: _user$project$StopsList$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$StopsList$Model = F2(
	function (a, b) {
		return {stops: a, uid: b};
	});
var _user$project$StopsList$IndexedStop = F2(
	function (a, b) {
		return {id: a, model: b};
	});
var _user$project$StopsList$updateHelp = F3(
	function (targetId, msg, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.model;
		var _p2 = _p1.id;
		return A2(
			_user$project$StopsList$IndexedStop,
			_p2,
			_elm_lang$core$Native_Utils.eq(targetId, _p2) ? _elm_lang$core$Basics$fst(
				A2(_user$project$Stop$update, msg, _p3)) : _p3);
	});
var _user$project$StopsList$update = F2(
	function (message, _p4) {
		var _p5 = _p4;
		var _p11 = _p5.uid;
		var _p10 = _p5.stops;
		var _p9 = _p5;
		var _p6 = message;
		if (_p6.ctor === 'Add') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p9,
					{
						stops: A2(
							_elm_lang$core$Basics_ops['++'],
							_p10,
							_elm_lang$core$Native_List.fromArray(
								[
									A2(_user$project$StopsList$IndexedStop, _p11, _user$project$Stop$initialModel)
								])),
						uid: _p11 + 1
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			var _p8 = _p6._1;
			var _p7 = _p6._0;
			return _elm_lang$core$Native_Utils.eq(_p8, _user$project$Stop$Remove) ? {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p9,
					{
						stops: A2(
							_elm_lang$core$List$filter,
							function (t) {
								return !_elm_lang$core$Native_Utils.eq(t.id, _p7);
							},
							_p10)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			} : {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p9,
					{
						stops: A2(
							_elm_lang$core$List$map,
							A2(_user$project$StopsList$updateHelp, _p7, _p8),
							_p10)
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$StopsList$Modify = F2(
	function (a, b) {
		return {ctor: 'Modify', _0: a, _1: b};
	});
var _user$project$StopsList$viewIndexedStop = function (_p12) {
	var _p13 = _p12;
	return A2(
		_elm_lang$html$Html_App$map,
		_user$project$StopsList$Modify(_p13.id),
		_user$project$Stop$view(_p13.model));
};
var _user$project$StopsList$Add = {ctor: 'Add'};
var _user$project$StopsList$view = function (model) {
	var add = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$StopsList$Add)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Add a new stop')
			]));
	var stops = A2(_elm_lang$core$List$map, _user$project$StopsList$viewIndexedStop, model.stops);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			stops,
			_elm_lang$core$Native_List.fromArray(
				[add])));
};
var _user$project$StopsList$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$StopsList$init, view: _user$project$StopsList$view, update: _user$project$StopsList$update, subscriptions: _user$project$StopsList$subscriptions})
};
