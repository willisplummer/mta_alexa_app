var _user$project$Main$decodeLoginResponse = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['token']),
	_elm_lang$core$Json_Decode$string);
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$setToken = _elm_lang$core$Native_Platform.outgoingPort(
	'setToken',
	function (v) {
		return (v.ctor === 'Nothing') ? null : v._0;
	});
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {signUp: a, stopsList: b, page: c, token: d};
	});
var _user$project$Main$HomePage = {ctor: 'HomePage'};
var _user$project$Main$LoginPage = {ctor: 'LoginPage'};
var _user$project$Main$SignUpPage = {ctor: 'SignUpPage'};
var _user$project$Main$Logout = {ctor: 'Logout'};
var _user$project$Main$FetchSucceed = function (a) {
	return {ctor: 'FetchSucceed', _0: a};
};
var _user$project$Main$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$Main$loginEndpoint = function (model) {
	var body = A2(
		_evancz$elm_http$Http$stringData,
		'user',
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				_elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: 'email',
						_1: _elm_lang$core$Json_Encode$string('willisplummer@gmail.com')
					},
						{
						ctor: '_Tuple2',
						_0: 'password',
						_1: _elm_lang$core$Json_Encode$string('testpw')
					}
					]))));
	var url = 'http://localhost:4567/endpoint.json';
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Main$FetchFail,
		_user$project$Main$FetchSucceed,
		A3(
			_evancz$elm_http$Http$post,
			_user$project$Main$decodeLoginResponse,
			url,
			_evancz$elm_http$Http$multipart(
				_elm_lang$core$Native_List.fromArray(
					[body]))));
};
var _user$project$Main$Login = {ctor: 'Login'};
var _user$project$Main$SetSessionToken = function (a) {
	return {ctor: 'SetSessionToken', _0: a};
};
var _user$project$Main$StopsList = function (a) {
	return {ctor: 'StopsList', _0: a};
};
var _user$project$Main$init = function (token) {
	var _p0 = _user$project$StopsList$init;
	var list = _p0._0;
	var listMsgs = _p0._1;
	return {
		ctor: '_Tuple2',
		_0: {signUp: _user$project$Signup$init, stopsList: list, page: _user$project$Routes$model, token: token},
		_1: _elm_lang$core$Platform_Cmd$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$StopsList, listMsgs)
				]))
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'StopsList':
				var _p2 = A2(_user$project$StopsList$update, _p1._0, model.stopsList);
				var list = _p2._0;
				var listCmds = _p2._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{stopsList: list}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$StopsList, listCmds)
				};
			case 'SetSessionToken':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$setToken(_p1._0)
				};
			case 'Login':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$loginEndpoint(model)
				};
			case 'Logout':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{token: _elm_lang$core$Maybe$Nothing}),
					_1: _user$project$Main$setToken(_elm_lang$core$Maybe$Nothing)
				};
			case 'FetchFail':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p3 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							token: _elm_lang$core$Maybe$Just(_p3)
						}),
					_1: _user$project$Main$setToken(
						_elm_lang$core$Maybe$Just(_p3))
				};
		}
	});
var _user$project$Main$view = function (model) {
	var tokenText = function () {
		var _p4 = model.token;
		if (_p4.ctor === 'Just') {
			return _p4._0;
		} else {
			return 'logged out';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Main$Login)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Get a token')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Main$Logout)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Logout')
					])),
				_elm_lang$html$Html$text(tokenText),
				A2(
				_elm_lang$html$Html_App$map,
				function (msg) {
					return _user$project$Main$StopsList(msg);
				},
				_user$project$StopsList$view(model.stopsList))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$programWithFlags(
		{init: _user$project$Main$init, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view, update: _user$project$Main$update}),
	flags: _elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
			]))
};
